else
{
# Break the loop if a positive number is encountered
break
}
}
print("Negative Numbers:")
print(negative_numbers)
negative_numbers <- c()
# Use a while loop to generate random normal numbers
while (TRUE)
{
# Generate a random normal number
random_number <- rnorm(5)
# Check if the number is negative
if (random_number < 0)
{
# Add the negative number to the vector
negative_numbers <- c(negative_numbers, random_number)
}
else
{
# Break the loop if a positive number is encountered
break
}
}
# Add the negative number to the vector
negative_numbers <- c(negative_
numbers, random_number)
# Add the negative number to the vector
negative_numbers <- c(negative_numbers, random_number)
print("Negative Numbers:")
print(negative_numbers)
negative_numbers <- c()
# Use a while loop to generate random normal numbers
while (TRUE)
{
# Generate a random normal number
random_number <- rnorm(1)
# Check if the number is negative
if (random_number < 0)
{
# Add the negative number to the vector
negative_numbers <- c(negative_numbers, random_number)
}
else
{
# Break the loop if a positive number is encountered
break
}
}
# Print the negative numbers
print("Negative Numbers:")
print(negative_numbers)
print("Negative Numbers:")
print(negative_numbers)
# Initialize an empty vector to store negative numbers
negative_numbers <- c()
# Use a while loop to generate random normal numbers
while (TRUE)
{
# Generate a random normal number
random_number <- rnorm(1)
# Check if the number is negative
if (random_number < 0)
{
# Add the negative number to the vector
negative_numbers <- c(negative_numbers, random_number)
}
else
{
# Break the loop if a positive number is encountered
break
}
}
# Print the negative numbers
print("Negative Numbers:")
print(negative_numbers)
coin_flip <- integer(40)
# Simulate coin flips using a for loop
for (i in 1:40) {
# Flip the coin (1 = heads, 0 = tails)
outcome <- sample(c(0, 1), 1)
# Store the outcome in the coin_flip vector
coin_flip[i] <- outcome
}
# Count the number of heads and tails
num_heads <- sum(coin_flip == 1)
num_tails <- sum(coin_flip == 0)
# Print the results
cat("Heads:", num_heads, "\n")
cat("Tails:", num_tails, "\n")
coin_flip <- integer(40)
# Simulate coin flips using a for loop
for (i in 1:40)
{
# Flip the coin (1 = heads, 0 = tails)
outcome <- sample(c(0, 1), 1)
# Store the outcome in the coin_flip vector
coin_flip[i] <- outcome
}
# Count the number of heads and tails
num_heads <- sum(coin_flip == 1)
num_tails <- sum(coin_flip == 0)
# Print the results
cat("Heads:", num_heads, "\n")
cat("Tails:", num_tails, "\n")
first_name <- c("Lea", "Sabine", "Mario", "Lea", "Peter", "Max")
last_name <- c("Schmidt", "Gross", "Super", "Kah", "Steiner", "Muster")
# Find and print individuals with the first name "Lea"
for (i in 1:length(first_name)) {
if (first_name[i] == "Lea") {
cat("First Name:", first_name[i], "\tLast Name:", last_name[i], "\n")
}
}
first_name <- c("Lea", "Sabine", "Mario", "Lea", "Peter", "Max")
last_name <- c("Schmidt", "Gross", "Super", "Kah", "Steiner", "Muster")
# Find and print individuals with the first name "Lea"
for (i in 1:length(first_name)) {
if (first_name[i] == "Lea") {
cat("First Name:", first_name[i], "\tLast Name:", last_name[i], "\n")
}
}
X <- 6
V <- c(7, 6, 6, 3, 7, 9, 3, 6, 6, 6, 8, 9)
# Initialize variables to keep track of the current streak and the maximum streak
current_streak <- 0
max_streak <- 0
# Iterate through the elements of the vector V
for (element in V) {
if (element == X) {
# If the element is equal to X, increment the current streak
current_streak <- current_streak + 1
# Update the maximum streak if the current streak is greater
if (current_streak > max_streak) {
max_streak <- current_streak
}
} else {
# If the element is not equal to X, reset the current streak to 0
current_streak <- 0
}
}
# Print the maximum streak of consecutive occurrences of X
cat("Maximum streak of consecutive occurrences of", X, "in vector V:", max_streak, "\n")
X <- 6
V <- c(7, 6, 6, 3, 7, 9, 3, 6, 6, 6, 8, 9)
# Initialize variables to keep track of the current streak and the maximum streak
current_streak <- 0
max_streak <- 0
# Iterate through the elements of the vector V
for (element in V)
{
if (element == X)
{
# If the element is equal to X, increment the current streak
current_streak <- current_streak + 1
# Update the maximum streak if the current streak is greater
if (current_streak > max_streak)
{
max_streak <- current_streak
}
}
else
{
# If the element is not equal to X, reset the current streak to 0
current_streak <- 0
}
}
# Print the maximum streak of consecutive occurrences of X
cat("Maximum streak of consecutive occurrences of", X, "in vector V:", max_streak, "\n")
X <- 5
V <- c(7, 6, 6, 3, 7, 9, 3, 6, 6, 6, 8, 9)
# Initialize variables to keep track of the current streak and the maximum streak
current_streak <- 0
max_streak <- 0
# Iterate through the elements of the vector V
for (element in V)
{
if (element == X)
{
# If the element is equal to X, increment the current streak
current_streak <- current_streak + 1
# Update the maximum streak if the current streak is greater
if (current_streak > max_streak)
{
max_streak <- current_streak
}
}
else
{
# If the element is not equal to X, reset the current streak to 0
current_streak <- 0
}
}
# Print the maximum streak of consecutive occurrences of X
cat("Maximum streak of consecutive occurrences of", X, "in vector V:", max_streak, "\n")
numbers <- c(55, 78, 84, 78, 5, 25, 20, 49, 789, 100, 203, 40, 2, 85)
# Create an empty vector to store the transformed numbers
transformed_numbers <- numeric(length(numbers))
# Iterate through the numbers
for (i in 1:length(numbers)) {
if (numbers[i] %% 2 == 0) {
# Double even numbers
transformed_numbers[i] <- numbers[i] * 2
} else {
# Turn odd numbers negative
transformed_numbers[i] <- -numbers[i]
}
}
# Print the transformed numbers
cat("Transformed Numbers: ", transformed_numbers, "\n")
numbers <- c(1, 8, 9, 1, 2, 4, 8, 9, 1, 5, 6, 4, 9, 2, 1, 5, 9, 1, 0, 3, 5, 6, 4, 2, 3, 5, 7, 9, 3, 1, 1, 5, 2)
# Find the positions where number 5 appears
positions <- which(numbers == 5)
# Find the third occurrence of number 5
third_occurrence <- positions[3]
# Print the position of the third occurrence of number 5
cat("The third occurrence of number 5 is at position:", third_occurrence, "\n")
# Define the Original_answer and Student_answer lists
Original_answer <- c('a', 'd', 'c', 'a', 'b')
Student_answer <- c('b', 'd', 'b', 'a', 'b')
# Initialize an empty vector to store the results
result <- character(length(Original_answer))
# Create the new list based on the comparison
for (i in 1:length(Original_answer)) {
if (Original_answer[i] == Student_answer[i]) {
result[i] <- "correct"
} else {
result[i] <- "incorrect"
}
}
# Print the result
print(result)
install.packages("palmerpenguins")
library(palmerpenguins)
install.packages("tidyverse")
library(tidyverse)
penguins %>%
arrange(bill_length_mm)
penguins %>%
arrange(-bill_length_mm)
penguins %>%
arrange(bill_length_mm)
penguins %>%
arrange(-bill_length_mm)
install.packages("Tmisc")
library(Tmisc)
data("quartet")
View(quartet)
View(quartet)
quartet %>%
group_by(set)
quartet %>%
group_by(set) %>%
summarise(mean(x),sd(x),mean(y),sd(y),cor(x,y))
View(quartet)
install.packages('datasauRus')
library('datasauRus')
ggplot(datasaurus_dozen,aes(x=x,y=y,colour=dataset))+geom_point()+theme_void()+
theme(legend.position = "none")+facet_wrap(~dataset,ncol=3)
library('datasauRus')
ggplot(datasaurus_dozen,aes(x=x,y=y,colour=dataset))+geom_point()+theme_void()+theme(legend.position = "none")+facet_wrap(~dataset,ncol=3)
install.packages('SinDesign')
library('SinDesign')
library(SinDesign)
install.packages('SimDesign')
library(SimDesign)
actual_temp<-c(25,24,23,26)
pred_temp<-c(24.5,24.5,22,25)
bias(actual_temp,pred_temp)
#home world_bank_pop
data("ToothGrowth")
View(ToothGrowth)
glimpse(ToothGrowth)
library(palmerpenguins)
penguins %>%
drop_na() %>%
group_by(species,island,sex) %>%
Summary(min=min(year),max=max(year))
penguins %>%
arrange(-bill_length_mm)
penguins %>%
drop_na() %>%
group_by(species,island,sex) %>%
Summary(min=min(year),max=max(year))
penguins %>%
drop_na() %>%
group_by(species,island,sex) %>%
summarise(min=min(year),max=max(year))
library(palmerpenguins)
data(penguins)
View(penguins)
View(penguins_raw)
View(penguins)
View(penguins_raw)
library(ggplot2)
data(penguins)
data(penguins)
library(ggplot2)
ggplot(data=penguins)+
geom_point(mapping = aes(x=flipper_length_mm,y=body_mass_g)
ggplot(data=penguins)+
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g
ggplot(data = penguins) +
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g
>ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g
ggplot(data = penguins) +
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g
install.packages("palmerpenguins")
library(ggplot2)
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g
ggplot(data = penguins) +
library(ggplot2)
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g,colours=species)
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g,colour=species)
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g,colours=species)
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g,color=species)
ggplot(data = penguins) +
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g,color=species)
ggplot(data = penguins) +
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g,color=species))
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g,shape=species))
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g,shape=species,color=species))
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g,shape=species,color=species,size=species))
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g),color="red")
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g),color="blue")
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g),color="red")
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g),color="red")
ggplot(data = penguins) +
geom_smooth(mapping = aes(x = flipper_length_mm, y = body_mass_g),color="red")
ggplot(data = penguins) +
geom_smooth(mapping = aes(x = flipper_length_mm, y = body_mass_g))
ggplot(data = penguins) +
geom_smooth(mapping = aes(x = flipper_length_mm, y = body_mass_g))+
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g,linetype=species))
ggplot(data = penguins) +
geom_smooth(mapping = aes(x = flipper_length_mm, y = body_mass_g,linetype=species))
ggplot(data = penguins) +
geom_jitter(mapping = aes(x = flipper_length_mm, y = body_mass_g,linetype=species))
ggplot(data = penguins) +
geom_bar(mapping = aes(x = flipper_length_mm, y = body_mass_g,linetype=species))
ggplot(data = dimonds) +
geom_jitter(mapping = aes(x = flipper_length_mm, y = body_mass_g,linetype=species))
data(diamons)
library(diamons)
library("diamons")
install.packages('ggplot2')
#load ggplot2
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("diamons")
library(ggplot2)
data(diamonds)
force(diamonds)
View(diamonds)
library("diamons")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut,color=cut)
ggplot(data = diamonds) +
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut,color=cut)
ggplot(data = diamonds) +
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut,fill=cut)
ggplot(data = diamonds) +
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut,fill=cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut,color=cut))
data %>%
filter(variable1 == "DS") %>%
ggplot(aes(x = weight, y = variable2, colour = variable1)) +
geom_point(alpha = 0.3,  position = position_jitter()) + stat_smooth(method = "lm")
data %>%
filter(variable1 == "penguins") %>%
ggplot(aes(x = weight, y = variable2, colour = variable1)) +
geom_point(alpha = 0.3,  position = position_jitter()) + stat_smooth(method = "lm")
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g,color=species))
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g,color=species))
labs(title = "palmar panguine: body mass vs flipper length")
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g,color=species))
labs(title = "palmar panguine: body mass vs flipper length")
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g,color=species))+
labs(title = "palmar panguine: body mass vs flipper length",subtitle = "mass")
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g,color=species))+
labs(title = "palmar panguine: body mass vs flipper length",subtitle = "sublitles")
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g,color=species))+
labs(title = "palmar panguine: body mass vs flipper length")
View(penguins_raw)
View(penguins)
View(diamonds)
library(caret)# LOGISTIC MODEL
library(ggplot2)# VISUALIZATION
library(MASS)# VIF CALCULATION
library(car)# VIF CALCULATION
library(mlogit)# LOGISTIC MODEL
library(sqldf)#WOE & IV
library(Hmisc)#WOE & IV
library(aod)#WALD TEST
#library(BaylorEdPsych)#R-SQUARE
library(ResourceSelection)#HOSMER LEMESHOW TEST
library(pROC)#ROC CURVE
library(ROCR)#ROC CURVE
library(caTools)#TRAIN AND TEST SPLIT
Path<-"C:/Users/dipan/OneDrive/Desktop/ivy all/MY_ALL_IVY_ONLYCLASS/R+STATICS/Case study/Case Study-2(logistics)"
setwd(Path)
getwd()
data<-read.csv("Data_for_Logistic_Regression.csv",header = TRUE)
data1=data#To create a backup of original data
head(data1)
str(data1)
summary(data1)
dim(data1)
cols_cat<-c("Status_Checking_Acc","Credit_History","Purposre_Credit_Taken","Savings_Acc",
"Years_At_Present_Employment","Marital_Status_Gender","Other_Debtors_Guarantors",
"Property","Other_Inst_Plans","Housing","Job","Telephone","Foreign_Worker","Default_On_Payment")
data1[cols_cat]<-lapply(data1[cols_cat],factor)
data.frame(colSums(is.na(data1)))
spl = sample.split(data1$Default_On_Payment , 0.7)
data.train = subset(data1, spl == TRUE)
str(data.train)
dim(data.train)
data.test = subset(data1, spl == FALSE)
str(data.test)
dim(data.test)
model <- glm(Default_On_Payment~ Status_Checking_Acc +	Duration_in_Months + Credit_History + Purposre_Credit_Taken + Credit_Amount +	Savings_Acc + Years_At_Present_Employment
+ Inst_Rt_Income + Marital_Status_Gender + Other_Debtors_Guarantors + Current_Address_Yrs + Property + Age
+ Other_Inst_Plans + Housing + Num_CC + Job +	Dependents
+ Telephone+Foreign_Worker, data=data.train, family=binomial())
summary(model)
## Remove->Other_Debtors_Guarantors,Savings_AccA62 ,Savings_AccA63
model <- glm(Default_On_Payment~ Status_Checking_Acc +	Duration_in_Months + I(Credit_History=="A32")+I(Credit_History=="A33")+I(Credit_History=="A34")
+   + Credit_Amount +	I(Savings_Acc=="A64") +	I(Savings_Acc=="A65")+ I(Years_At_Present_Employment=="A74")+I(Years_At_Present_Employment=="A75")
+ Inst_Rt_Income + I(Marital_Status_Gender=="A93") + I(Property=="A124") + Age
+ I(Other_Inst_Plans=="A142") + Housing + Num_CC  +	Dependents
+ Telephone+Foreign_Worker, data=data.train, family=binomial())
summary(model)
library(caret)# LOGISTIC MODEL
library(ggplot2)# VISUALIZATION
library(MASS)# VIF CALCULATION
library(car)# VIF CALCULATION
library(mlogit)# LOGISTIC MODEL
library(sqldf)#WOE & IV
library(Hmisc)#WOE & IV
library(aod)#WALD TEST
#library(BaylorEdPsych)#R-SQUARE
library(ResourceSelection)#HOSMER LEMESHOW TEST
library(pROC)#ROC CURVE
library(ROCR)#ROC CURVE
library(caTools)#TRAIN AND TEST SPLIT
Path<-"C:/Users/dipan/OneDrive/Desktop/ivy all/MY_ALL_IVY_ONLYCLASS/R+STATICS/Case study/Case Study-2(logistics)"
setwd(Path)
getwd()
data<-read.csv("Data_for_Logistic_Regression.csv",header = TRUE)
data1=data#To create a backup of original data
head(data1)
str(data1)
summary(data1)
dim(data1)
cols_cat<-c("Status_Checking_Acc","Credit_History","Purposre_Credit_Taken","Savings_Acc",
"Years_At_Present_Employment","Marital_Status_Gender","Other_Debtors_Guarantors",
"Property","Other_Inst_Plans","Housing","Job","Telephone","Foreign_Worker","Default_On_Payment")
data1[cols_cat]<-lapply(data1[cols_cat],factor)
data.frame(colSums(is.na(data1)))
set.seed(144)#This is used to produce reproducible results, every time we run the model
spl = sample.split(data1$Default_On_Payment , 0.7)
data.train = subset(data1, spl == TRUE)
str(data.train)
dim(data.train)
data.test = subset(data1, spl == FALSE)
str(data.test)
dim(data.test)
model <- glm(Default_On_Payment~., data=data.train, family=binomial())# ~.,.-> dot means all valus & binomial means two values
summary(model)
View(data)
str(data1)
str(data1)
summary(data1)
